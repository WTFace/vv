{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","monster","name","src","id","alt","CardList","className","monsters","map","m","SearchBox","handleChange","type","onChange","App","e","setState","searchField","target","value","func","console","log","state","this","filtered","filter","includes","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAEaA,EAAO,SAAAC,GAAK,OACrB,gCACI,6BAAKA,EAAMC,QAAQC,OACnB,qBAAKC,IAAG,+BAA0BH,EAAMC,QAAQG,IAAMC,IAAI,SCFrDC,EAAW,SAAAN,GAAK,OACzB,qBAAKO,UAAU,YAAf,SACKP,EAAMQ,SAASC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAMT,QAASS,GAAQA,EAAEN,UCH7CO,EAAY,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACvB,OAAO,uBAAOC,KAAK,SAASC,SAAUF,KCiD3BG,G,8DA7Cb,aAAc,IAAD,8BACX,gBAwBFH,aAAe,SAAAI,GAAC,OAAI,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAzB3C,EA0BbC,KAAO,WACLC,QAAQC,IAAI,IAAZ,iBAzBA,EAAKC,MAAQ,CACXhB,SAAU,CACR,CACEJ,GAAI,EACJF,KAAM,QAER,CACEE,GAAI,EACJF,KAAM,QAER,CACEE,GAAI,EACJF,KAAM,QAER,CACEE,GAAI,EACJF,KAAM,SAGVgB,YAAa,IArBJ,E,0CA8Bb,WAAS,IAAD,EAC0BO,KAAKD,MAA9BhB,EADD,EACCA,SAAUU,EADX,EACWA,YACXQ,EAAWlB,EAASmB,QAAQ,SAAAjB,GAAC,OAAIA,EAAER,KAAK0B,SAASV,MAEvD,OACE,sBAAKX,UAAU,MAAf,UACE,wBAAQsB,QAASJ,KAAKJ,KAAtB,oBACA,cAAC,EAAD,CAAWT,aAAca,KAAKb,eAC9B,cAAC,EAAD,CAAUJ,SAAUkB,W,GAvCVI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.071e2c06.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Card = props => \n    <div>\n        <h1>{props.monster.name}</h1>\n        <img src={`https://robohash.org/${props.monster.id}`} alt=\"\" />\n    </div>\n\n","import React from \"react\";\nimport { Card } from \"../card/card\";\n\nexport const CardList = props => (\n    <div className=\"card-list\">\n        {props.monsters.map(m => <Card monster={m} key={m.id}/>)}\n    </div>\n)\n","import React from 'react'\n\nexport const SearchBox = ({handleChange}) => {\n    return <input type=\"search\" onChange={handleChange}/>\n}\n\n","import React, { Component } from 'react'\nimport { CardList } from './components/card-list/card-list';\nimport {SearchBox} from './components/search-box/search-box';\nimport './components/card-list/card-list.css';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters: [\n        {\n          id: 1,\n          name: 'mon1'\n        },\n        {\n          id: 2,\n          name: 'mon2'\n        },\n        {\n          id: 3,\n          name: 'mon3'\n        },\n        {\n          id: 4,\n          name: 'mon4'\n        },\n      ],\n      searchField: ''\n    }\n  }\n\n  handleChange = e => this.setState({searchField:e.target.value});\n  func = () => {\n    console.log(123, this)\n  }\n\n  render(){\n    const {monsters, searchField} = this.state;\n    const filtered = monsters.filter( m => m.name.includes(searchField));\n\n    return (\n      <div className=\"App\">\n        <button onClick={this.func}>button</button>\n        <SearchBox handleChange={this.handleChange}/>\n        <CardList monsters={filtered}>\n        </CardList>  \n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}